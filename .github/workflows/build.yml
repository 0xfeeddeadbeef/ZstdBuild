name: Build
on: workflow_dispatch

jobs:
  Build-in-Matrix:
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-20.04', 'windows-2022' ]
    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.os }}
    steps:
      - name: Clone
        uses: actions/checkout@v4
        with:
          repository: facebook/zstd
          ref: refs/tags/v1.5.6
          clean: true
          fetch-depth: 1
          submodules: recursive
          show-progress: false
          persist-credentials: false
      - name: Setup Ninja (Windows)
        if: ${{ success() && matrix.os == 'windows-2022' }}
        uses: seanmiddleditch/gha-setup-ninja@v5
      - name: Setup Visual C++
        if: ${{ success() && matrix.os == 'windows-2022' }}
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64
      - name: Configure vcpkg (Windows)
        if: ${{ success() && matrix.os == 'windows-2022' }}
        run: |
          echo "VCPKG_TARGET_ARCHITECTURE=x64" >> "$($env:GITHUB_ENV)"
          echo "VCPKG_ROOT=$($env:VCPKG_INSTALLATION_ROOT)" >> "$($env:GITHUB_ENV)"
          echo "VCPKG_CRT_LINKAGE=static" >> "$($env:GITHUB_ENV)"
          echo "VCPKG_BUILD_TYPE=release" >> "$($env:GITHUB_ENV)"
          echo "VCPKG_LIBRARY_LINKAGE=dynamic" >> "$($env:GITHUB_ENV)"
          echo "VCPKG_CMAKE_SYSTEM_NAME=Windows" >> "$($env:GITHUB_ENV)"
      - name: Make (Linux)
        if: ${{ success() && matrix.os == 'ubuntu-20.04' }}
        run: make lib-mt
        env:
          CFLAGS: "-Xlinker -Bsymbolic"
          LDFLAGS: "-Xlinker -Bsymbolic"
      - name: CMake (Windows)
        if: ${{ success() && matrix.os == 'windows-2022' }}
        run: |
          Set-Location -Path 'build\cmake'
          & "C:\Program Files\CMake\bin\cmake.exe" -B build -G Ninja -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -DCMAKE_BUILD_TYPE=Release -DCMAKE_MAKE_PROGRAM=ninja -DZSTD_BUILD_PROGRAMS=OFF -DZSTD_BUILD_TESTS=OFF -DZSTD_MULTITHREAD_SUPPORT=ON -DZSTD_USE_STATIC_RUNTIME=ON -DZSTD_LEGACY_SUPPORT=ON
          & "C:\Program Files\CMake\bin\cmake.exe" --build build
      - name: Upload (Linux)
        if: ${{ success() && matrix.os == 'ubuntu-20.04' }}
        uses: actions/upload-artifact@v4
        with:
          name: libs-linux
          path: 'lib/**/*.so*'
      - name: Upload (Windows)
        if: ${{ success() && matrix.os == 'windows-2022' }}
        uses: actions/upload-artifact@v4
        with:
          name: libs-windows
          path: 'build/cmake/**/*.dll'
